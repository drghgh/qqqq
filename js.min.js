// Firebase Configuration
const firebaseConfig = {
    apiKey: "AIzaSyBEBHdyxap8fX8HPu9BSxb6wYTf5jG8u7g",
    authDomain: "elsher.firebaseapp.com",
    projectId: "elsher",
    storageBucket: "elsher.firebasestorage.app",
    messagingSenderId: "378900396521",
    appId: "1:378900396521:web:1335295e15598a412f7378"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();

// Configure Firestore
db.settings({
    cacheSizeBytes: firebase.firestore.CACHE_SIZE_UNLIMITED
});

// Enable offline persistence
db.enablePersistence().catch((err) => {
    if (err.code == 'failed-precondition') {
        console.error('Multiple tabs open, persistence can only be enabled in one tab at a time.');
    } else if (err.code == 'unimplemented') {
        console.error('The current browser does not support persistence.');
    }
});

// Security Protection System
(function() {
    'use strict';
    
    // Warning message in console
    const warningMessage = `
⚠️ تحذير أمني ⚠️
هذا الموقع محمي بحقوق الطبع والنشر
أي محاولة لسرقة أو نسخ الكود محظورة قانونياً
جميع الأنشطة مراقبة ومسجلة
    `;
    
    console.clear();
    console.log('%c' + warningMessage, 'color: red; font-size: 16px; font-weight: bold;');
    
    // Detect developer tools
    let devtools = { open: false, orientation: null };
    const threshold = 160;
    
    setInterval(function() {
        if (window.outerHeight - window.innerHeight > threshold || 
            window.outerWidth - window.innerWidth > threshold) {
            if (!devtools.open) {
                devtools.open = true;
                document.body.innerHTML = `
                    <div style="position:fixed;top:0;left:0;width:100%;height:100%;background:#000;color:#ff0000;display:flex;align-items:center;justify-content:center;font-size:24px;z-index:999999;">
                        <div style="text-align:center;">
                            <h1>⚠️ تحذير أمني ⚠️</h1>
                            <p>تم اكتشاف محاولة وصول غير مصرح بها</p>
                            <p>سيتم إغلاق الصفحة خلال 3 ثوان</p>
                        </div>
                    </div>
                `;
                setTimeout(() => {
                    window.location.href = 'about:blank';
                }, 3000);
            }
        } else {
            devtools.open = false;
        }
    }, 500);
    
    // Disable right-click
    document.addEventListener('contextmenu', function(e) {
        e.preventDefault();
        showSecurityAlert('النقر بالزر الأيمن');
        return false;
    });
    
    // Disable keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        // F12, Ctrl+Shift+I, Ctrl+Shift+J, Ctrl+U, Ctrl+Shift+C, Ctrl+S, Ctrl+A
        if (e.keyCode === 123 || 
            (e.ctrlKey && e.shiftKey && (e.keyCode === 73 || e.keyCode === 74)) ||
            (e.ctrlKey && e.keyCode === 85) ||
            (e.ctrlKey && e.shiftKey && e.keyCode === 67) ||
            (e.ctrlKey && e.keyCode === 83) ||
            (e.ctrlKey && e.keyCode === 65)) {
            e.preventDefault();
            showSecurityAlert('اختصار لوحة المفاتيح المحظور');
            return false;
        }
    });
    
    // Disable text selection
    document.addEventListener('selectstart', function(e) {
        e.preventDefault();
        return false;
    });
    
    // Disable drag and drop
    document.addEventListener('dragstart', function(e) {
        e.preventDefault();
        return false;
    });
    
    function showSecurityAlert(action) {
        console.warn('محاولة وصول مشبوهة:', action);
        logSuspiciousActivity(action);
    }
    
    function logSuspiciousActivity(activity) {
        try {
            if (typeof db !== 'undefined') {
                db.collection('security_logs').add({
                    activity: activity,
                    timestamp: new Date().toISOString(),
                    userAgent: navigator.userAgent,
                    url: window.location.href
                });
            }
        } catch (error) {
            console.error('Failed to log activity:', error);
        }
    }
    
    // Monitor DOM changes
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach(function(node) {
                    if (node.nodeType === 1) { // Element node
                        if (node.tagName === 'SCRIPT' || node.tagName === 'IFRAME') {
                            node.remove();
                            logSuspiciousActivity('محاولة حقن كود');
                        }
                    }
                });
            }
        });
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
})();

// Override console methods
console.log = function() {};
console.warn = function() {};
console.error = function(error) {
    const sanitizedError = {
        message: error.message,
        timestamp: new Date().toISOString(),
        url: window.location.pathname
    };
    if (typeof db !== 'undefined') {
        db.collection('errors').add(sanitizedError);
    }
};

// Input sanitization functions
function sanitizeInput(input) {
    if (typeof input !== 'string') return input;
    return input.replace(/[<>"']/g, '')
                .replace(/javascript:/gi, '')
                .replace(/on\w+=/gi, '')
                .replace(/script/gi, '')
                .trim();
}

function validateURL(url) {
    try {
        const urlObj = new URL(url);
        return urlObj.protocol === 'http:' || urlObj.protocol === 'https:';
    } catch {
        return false;
    }
}

function encryptSensitiveData(data) {
    return btoa(JSON.stringify(data));
}

function decryptSensitiveData(encryptedData) {
    try {
        return JSON.parse(atob(encryptedData));
    } catch {
        return null;
    }
}

function validateNumber(number) {
    const num = parseFloat(number);
    return !isNaN(num) && isFinite(num) && num >= 0;
}

function preventXSS(str) {
    const div = document.createElement('div');
    div.textContent = str;
    return div.innerHTML;
}

function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function validatePhone(phone) {
    const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
    return phoneRegex.test(phone.replace(/\s/g, ''));
}

// Cart functionality
let cart = [];

function addToCart(productId, name, price) {
    try {
        productId = sanitizeInput(productId);
        name = sanitizeInput(name);
        
        if (!validateNumber(price)) {
            throw new Error('سعر غير صالح');
        }
        
        const existingItem = cart.find(item => item.id === productId);
        if (existingItem) {
            existingItem.quantity += 1;
        } else {
            cart.push({
                id: productId,
                name: name,
                price: price,
                quantity: 1
            });
        }
        
        updateCartBadge();
        showNotification('تمت إضافة المنتج إلى السلة', 'success');
    } catch (error) {
        console.error(error);
        showNotification('حدث خطأ في إضافة المنتج', 'error');
    }
}

function updateCartBadge() {
    const badge = document.getElementById('cart-badge');
    if (badge) {
        const totalItems = cart.reduce((total, item) => total + item.quantity, 0);
        badge.textContent = totalItems;
    }
}

function showNotification(message, type) {
    const notification = document.getElementById('notification');
    if (notification) {
        notification.querySelector('p').textContent = message;
        notification.classList.add('show');
        setTimeout(() => {
            notification.classList.remove('show');
        }, 3000);
    }
}

// Generate secure order code
function generateSecureOrderCode() {
    const timestamp = Date.now().toString(36);
    const randomStr = Math.random().toString(36).substr(2, 9);
    return (timestamp + randomStr).toUpperCase();
}

// Order form submission
document.addEventListener('DOMContentLoaded', function() {
    const orderForm = document.getElementById('order-form');
    if (orderForm) {
        orderForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            try {
                const name = sanitizeInput(document.getElementById('customer-name').value);
                const phone = sanitizeInput(document.getElementById('customer-phone').value);
                const address = sanitizeInput(document.getElementById('customer-address').value);
                
                if (!phone.match(/^[0-9+\s-]{10,}$/)) {
                    throw new Error('رقم هاتف غير صالح');
                }
                
                if (cart.length === 0) {
                    throw new Error('السلة فارغة');
                }
                
                let totalPrice = 0;
                for (const item of cart) {
                    if (!validateNumber(item.price) || !validateNumber(item.quantity)) {
                        throw new Error('بيانات المنتج غير صالحة');
                    }
                    totalPrice += item.price * item.quantity;
                }
                
                const orderCode = generateSecureOrderCode();
                
                const orderData = {
                    orderCode: orderCode,
                    customerName: name,
                    customerPhone: phone,
                    customerAddress: address,
                    items: cart.map(item => ({
                        id: item.id,
                        name: item.name,
                        price: item.price,
                        quantity: item.quantity
                    })),
                    totalPrice: totalPrice,
                    status: 'pending',
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                };
                
                await db.collection('orders').add(orderData);
                
                cart = [];
                updateCartBadge();
                showNotification(`تم إرسال طلبك بنجاح! رقم الطلب: ${orderCode}`, 'success');
                orderForm.reset();
                
            } catch (error) {
                console.error(error);
                showNotification('حدث خطأ في إرسال الطلب: ' + error.message, 'error');
            }
        });
    }
});

function addToCart(productId){
    const product=products.find((p=>p.id===productId));
    if(!product)return;
    const existingItem=cart.find((item=>item.id===productId));
    if(existingItem){
        existingItem.quantity+=1
    }else{
        cart.push({id:product.id,name:product.name,price:product.price,quantity:1})
    }
    updateCartBadge();
    showNotification("تمت إضافة المنتج إلى السلة","success")
}

function updateCartBadge(){
    const badge=document.getElementById("cart-badge");
    if(badge){
        const totalItems=cart.reduce(((sum,item)=>sum+item.quantity),0);
        badge.textContent=totalItems
    }
}

function openCart(){
    const modal=document.getElementById("cart-modal");
    const cartItems=document.getElementById("cart-items");
    const total=document.getElementById("total");
    cartItems.innerHTML="";
    let totalPrice=0;
    cart.forEach((item=>{
        const itemTotal=item.price*item.quantity;
        totalPrice+=itemTotal;
        const li=document.createElement("li");
        li.className="cart-item";
        li.innerHTML=`\n            <div>\n                <h4>${item.name}</h4>\n                <p>${item.price} جنيه × ${item.quantity.toFixed(2)}</p>\n            </div>\n            <div>\n                <button onclick="updateQuantity('${item.id}', ${item.quantity-1})">-</button>\n                <span>${item.quantity.toFixed(2)}</span>\n                <button onclick="updateQuantity('${item.id}', ${item.quantity+1})">+</button>\n                <button onclick="removeFromCart('${item.id}')" class="remove-btn">\n                    <i class="fas fa-trash"></i>\n                </button>\n            </div>\n        `;
        cartItems.appendChild(li)
    }));
    total.textContent=totalPrice.toFixed(2);
    modal.style.display="block"
}

function closeCart(){
    document.getElementById("cart-modal").style.display="none"
}

function updateQuantity(productId,newQuantity){
    if(newQuantity<=0){
        removeFromCart(productId);
        return
    }
    const item=cart.find((item=>item.id===productId));
    if(item){
        item.quantity=newQuantity;
        updateCartBadge();
        openCart()
    }
}

function removeFromCart(productId){
    cart=cart.filter((item=>item.id!==productId));
    updateCartBadge();
    openCart()
}

function generateVerificationCode(){
    const chars="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    let code="";
    for(let i=0;i<6;i++){
        code+=chars.charAt(Math.floor(Math.random()*chars.length))
    }
    return code
}

document.getElementById("order-form").addEventListener("submit",(function(e){
    e.preventDefault();
    const name=document.getElementById("customer-name").value;
    const phone=document.getElementById("customer-phone").value;
    const address=document.getElementById("customer-address").value;
    const orderCode=generateVerificationCode();
    const verificationCode=generateVerificationCode();
    let message=`🌟 طلب جديد من موقع برتو زلابية 🌟\n`;
    message+=`كود الطلب: #${orderCode}\n`;
    message+=`رمز التحقق: ${verificationCode}\n`;
    message+=`------------------\n\n`;
    message+=`الاسم: ${name}\n`;
    message+=`رقم الهاتف: ${phone}\n`;
    message+=`العنوان: ${address}\n\n`;
    message+=`الطلبات:\n`;
    let totalPrice=0;
    cart.forEach((item=>{
        const itemTotal=item.price*item.quantity;
        totalPrice+=itemTotal;
        message+=`${item.name}: ${item.quantity.toFixed(2)} × ${item.price} جنيه = ${itemTotal.toFixed(2)} جنيه\n`
    }));
    message+=`\nالمجموع الكلي: ${totalPrice.toFixed(2)} جنيه`;
    message+=`\n\n------------------`;
    message+=`\nتم الطلب من موقع برتو زلابية`;
    message+=`\nwww.portozalabya.com`;
    db.collection("orders").add({orderCode:orderCode,verificationCode:verificationCode,customerName:name,customerPhone:phone,customerAddress:address,items:cart,totalPrice:totalPrice,status:"pending",createdAt:firebase.firestore.FieldValue.serverTimestamp()}).then((()=>{
        const link=document.createElement("a");
        link.href=`https://api.whatsapp.com/send?phone=201273580725&text=${encodeURIComponent(message)}`;
        link.style.display="none";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        showNotification("تم إرسال طلبك بنجاح! سنتواصل معك قريباً","success");
        closeCart();
        cart=[];
        updateCartBadge();
        const confirmationModal=document.getElementById("confirmation-modal");
        document.getElementById("order-number").textContent=orderCode;
        confirmationModal.style.display="block"
    })).catch((error=>{
        console.error("Error adding order:",error);
        showNotification("حدث خطأ في إرسال الطلب. برجاء المحاولة مرة أخرى","error")
    }))
}));

function closeConfirmation(){
    const modal=document.getElementById("confirmation-modal");
    modal.style.display="none"
}

function showConfirmation(orderId){
    const modal=document.getElementById("confirmation-modal");
    document.getElementById("order-number").textContent=orderId;
    modal.style.display="block"
}

function showNotification(message,type="success"){
    const notification=document.getElementById("notification");
    const messageElement=document.getElementById("notification-message");
    messageElement.textContent=message;
    notification.className=`notification ${type}`;
    notification.classList.add("show");
    setTimeout((()=>{
        notification.classList.remove("show")
    }),3e3)
}

async function searchProducts(query){
    query=query.trim().toLowerCase();
    try{
        if(!query){
            const snapshot=await db.collection("products").get();
            const allProducts=[];
            snapshot.forEach((doc=>{
                allProducts.push({id:doc.id,...doc.data()})
            }));
            displayProducts(allProducts);
            return
        }
        const snapshot=await db.collection("products").orderBy("name").get();
        const filteredProducts=[];
        snapshot.forEach((doc=>{
            const product={id:doc.id,...doc.data()};
            if(product.name.toLowerCase().includes(query)||product.description?.toLowerCase().includes(query)){
                filteredProducts.push(product)
            }
        }));
        displayProducts(filteredProducts);
        if(filteredProducts.length===0){
            const menu=document.getElementById("menu");
            menu.innerHTML=`\n                <div class="no-results">\n                    <i class="fas fa-search"></i>\n                    <p>لا توجد منتجات تطابق بحثك</p>\n                </div>\n            `
        }
    }catch(error){
        console.error("خطأ في البحث:",error);
        showNotification("حدث خطأ في البحث. برجاء المحاولة مرة أخرى","error")
    }
}

document.addEventListener("DOMContentLoaded",(function(){
    const loadingScreen=document.getElementById("loading-screen");
    setTimeout((()=>{
        loadingScreen.classList.add("fade-out");
        setTimeout((()=>{
            loadingScreen.style.display="none"
        }),500)
    }),2e3);
    loadProducts();
    document.querySelectorAll(".category-btn").forEach((button=>{
        button.addEventListener("click",(()=>{
            document.querySelectorAll(".category-btn").forEach((btn=>btn.classList.remove("active")));
            button.classList.add("active");
            currentCategory=button.dataset.category;
            displayProducts()
        }))
    }));
    const searchInput=document.getElementById("search-input");
    let searchTimeout;
    searchInput.addEventListener("input",(function(){
        clearTimeout(searchTimeout);
        searchTimeout=setTimeout((()=>{
            searchProducts(this.value)
        }),300)
    }));
    window.onclick=function(event){
        const cartModal=document.getElementById("cart-modal");
        const confirmationModal=document.getElementById("confirmation-modal");
        const priceModal=document.getElementById("price-modal");
        if(event.target===cartModal){
            closeCart()
        }
        if(event.target===confirmationModal){
            closeConfirmation()
        }
        if(event.target===priceModal){
            closePriceModal()
        }
    }
}));

window.addEventListener("beforeunload",(function(){
    const loadingScreen=document.getElementById("loading-screen");
    loadingScreen.style.display="flex";
    loadingScreen.classList.remove("fade-out")
}));

document.addEventListener("contextmenu",(function(e){
    e.preventDefault();
    return false
}));

document.addEventListener("keydown",(function(e){
    if(e.key==="F12"||e.ctrlKey&&e.shiftKey&&e.key==="I"||e.ctrlKey&&e.shiftKey&&e.key==="J"||e.ctrlKey&&e.key==="U"){
        e.preventDefault();
        return false
    }
    if(e.ctrlKey&&(e.key==="c"||e.key==="C")){
        e.preventDefault();
        return false
    }
}));

document.addEventListener("dragstart",(function(e){
    e.preventDefault();
    return false
}));

const observer=new MutationObserver((function(mutations){
    mutations.forEach((function(mutation){
        if(mutation.type==="childList"){
            const suspiciousElements=document.querySelectorAll('script[src*="http"], link[href*="http"]');
            suspiciousElements.forEach((element=>element.remove()))
        }
    }))
}));

observer.observe(document.body,{childList:true,subtree:true});

setInterval((function(){
    if(window.outerWidth-window.innerWidth>160||window.outerHeight-window.innerHeight>160){
        document.body.innerHTML="تم اكتشاف محاولة اختراق!"
    }
    const priceElements=document.querySelectorAll(".price");
    priceElements.forEach((element=>{
        const originalPrice=element.getAttribute("data-original-price");
        if(originalPrice&&element.textContent!==originalPrice){
            element.textContent=originalPrice
        }
    }))
}),1e3);

function encryptData(data){
    return btoa(JSON.stringify(data))
}

function validateSource(){
    const validDomains=["portozalabya.com","www.portozalabya.com"];
    if(!validDomains.includes(window.location.hostname)){
        document.body.innerHTML="هذا الموقع مزيف!";
        return false
    }
    return true
}

async function sendOrder(orderData){
    if(!validateSource())return;
    const encryptedData=encryptData(orderData);
    try{
        const response=await fetch("/api/orders",{method:"POST",headers:{"Content-Type":"application/json","X-Security-Token":generateSecurityToken()},body:JSON.stringify({data:encryptedData})});
        return await response.json()
    }catch(error){
        console.error("خطأ في إرسال الطلب");
        return null
    }
}

function generateSecurityToken(){
    const timestamp=Date.now();
    const random=Math.random().toString(36).substring(7);
    return btoa(`${timestamp}:${random}`)
}